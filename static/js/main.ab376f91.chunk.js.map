{"version":3,"sources":["components/eventlist.js","components/calendar.js","App.js","reportWebVitals.js","index.js"],"names":["list","EventsList","useState","className","map","item","summary","Calendar","state","currentMonth","Date","selectedDate","onDateClick","day","setState","nextMonth","addMonths","prevMonth","subMonths","onClick","this","format","days","startDate","startOfWeek","i","push","addDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","isSameDay","renderHeader","renderDays","renderCells","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab376f91.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nvar list = [\r\n    {'summary': 'Showing',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-05-28T09:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2021-05-28T10:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n\r\n    {'summary': 'Showing',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-05-28T12:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2015-05-28T14:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n\r\n    {\r\n    'summary': 'Google I/O 2015',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-05-29T09:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2021-05-29T17:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n];\r\n\r\nconst EventsList = () => {\r\n    const [events, setEvents] = useState(list)\r\n    return (\r\n      <ul className=\"calendar-dates\">\r\n        {list.map( item =>\r\n            <li className=\"event\">\r\n          <h2>{item.summary}</h2>\r\n        </li>\r\n        )}\r\n      </ul>\r\n    )\r\n}\r\n\r\nexport default EventsList;\r\n","\r\nimport React from \"react\";\r\nimport dateFns, {format, addMonths, subMonths, startOfWeek, addDays,\r\n    startOfMonth, endOfMonth, endOfWeek, isSameMonth, isSameDay, parse } from \"date-fns\";\r\n\r\nclass Calendar extends React.Component {\r\n    state = {\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n    };\r\n\r\n    renderHeader() { \r\n        const dateFormat = \"MMMM yyyy\";\r\n        return (\r\n        <div className=\"header row flex-middle\">\r\n            <div className=\"col col-start\">\r\n            <div className=\"icon\" onClick={this.prevMonth}>\r\n                chevron_left\r\n            </div>\r\n            </div>\r\n            <div className=\"col col-center\">\r\n            <span>\r\n                {format(this.state.currentMonth, dateFormat)}\r\n            </span>\r\n            </div>\r\n            <div className=\"col col-end\" onClick={this.nextMonth}>\r\n            <div className=\"icon\">chevron_right</div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n    renderDays() {\r\n        const dateFormat = \"E\";\r\n        const days = [];\r\n        let startDate = startOfWeek(this.state.currentMonth);\r\n        for (let i = 0; i < 7; i++) {\r\n          days.push(\r\n            <div className=\"col col-center\" key={i}>\r\n              {format(addDays(startDate, i), dateFormat)}\r\n            </div>\r\n          );\r\n        }\r\n        return <div className=\"days row\">{days}</div>;\r\n      }\r\n    \r\n    renderCells() {\r\n        const { currentMonth, selectedDate } = this.state;\r\n        const monthStart = startOfMonth(currentMonth);\r\n        const monthEnd = endOfMonth(monthStart);\r\n        const startDate = startOfWeek(monthStart);\r\n        const endDate = endOfWeek(monthEnd);\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n    \r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n    \r\n        while (day <= endDate) {\r\n          for (let i = 0; i < 7; i++) {\r\n            formattedDate = format(day, dateFormat);\r\n            const cloneDay = day;\r\n            days.push(\r\n              <div\r\n                className={`col cell ${\r\n                  !isSameMonth(day, monthStart)\r\n                    ? \"disabled\"\r\n                    : isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n                }`}\r\n                key={day}\r\n                onClick={() => this.onDateClick(cloneDay)}\r\n              >\r\n                <span className=\"number\">{formattedDate}</span>\r\n                <span className=\"bg\">{formattedDate}</span>\r\n              </div>\r\n            );\r\n            day = addDays(day, 1);\r\n          }\r\n          rows.push(\r\n            <div className=\"row\" key={day}>\r\n              {days}\r\n            </div>\r\n          );\r\n          days = [];\r\n        }\r\n        return <div className=\"body\">{rows}</div>;\r\n      }\r\n    \r\n    onDateClick = day => {\r\n        this.setState({\r\n          selectedDate: day\r\n        });\r\n      };\r\n\r\n\r\n\r\n    nextMonth = () => {\r\n        this.setState({\r\n          currentMonth: addMonths(this.state.currentMonth, 1)\r\n        });\r\n    };\r\n  \r\n    prevMonth = () => {\r\n        this.setState({\r\n          currentMonth: subMonths(this.state.currentMonth, 1)\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"calendar\">\r\n            {this.renderHeader()}\r\n            {this.renderDays()}\r\n            {this.renderCells()}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calendar;","import './App.css';\nimport './Calendar.css'\nimport EventsList from './components/eventlist';\nimport Calendar from './components/calendar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Hello World!</p>\n      </header>\n    <body>\n      <p>Are you there? It is me, Jake!</p>\n      <EventsList />\n      <Calendar />   \n    </body> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}